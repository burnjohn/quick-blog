---
alwaysApply: true
---

# AI Assistant Guidelines for Quick Blog

## When Writing Code

### Core Requirements
- Provide **complete, working solutions** (not partial code snippets)
- Include proper **error handling** in all async operations
- Follow the project's code style:
  - 2 spaces indentation
  - No semicolons
  - Single quotes for strings
  - camelCase for variables/functions
  - PascalCase for React components
- Use functional components with hooks (no class components)
- Use Tailwind CSS for all styling
- Add brief comments **only** for complex logic

### Technology Constraints
❌ **Do NOT use:**
- TypeScript (this is a JavaScript project)
- Class components in React
- CSS-in-JS or styled-components
- The `@apply` directive in Tailwind
- Semicolons (unless required)

✅ **Do use:**
- Modern JavaScript (ES6+)
- Functional React components with hooks
- Tailwind utility classes directly in JSX
- async/await with try-catch
- Early returns for error conditions

## When Adding Features

### Feature Development Workflow
1. **Check existing code** - Look for similar functionality before creating new code
2. **Update both sides** - If feature spans frontend and backend, update both
3. **Test API first** - Test backend endpoints before integrating with frontend
4. **Add error handling** - Include error handling for new routes/functions
5. **Consider mobile** - Ensure UI changes are responsive
6. **Use Tailwind** - Use Tailwind utilities for consistent styling

### Architecture Awareness
- Understand the client-server separation
- Follow existing patterns in the codebase
- Respect the project structure: [client/src/](mdc:client/src) and [server/src/](mdc:server/src)
- Use existing custom hooks from [client/src/hooks/](mdc:client/src/hooks)
- Use existing API functions from [client/src/api/](mdc:client/src/api)

## When Fixing Bugs

### Debugging Process
1. **Identify root cause** - Don't just patch symptoms
2. **Check both sides** - Verify frontend and backend
3. **Review network** - Look at network requests/responses in DevTools
4. **Verify environment** - Check environment variables are set
5. **Check database** - Verify database connections and queries
6. **Console logs** - Check browser and server console for errors
7. **Test thoroughly** - Ensure the fix works and doesn't break anything else
8. **Look for similar issues** - Check if the same bug exists elsewhere

### Common Issues to Check
- Missing environment variables
- CORS configuration
- JWT token issues (expired, malformed, not sent)
- Database connection errors
- API endpoint mismatches
- Validation errors
- Async/await error handling

## When Refactoring

### Refactoring Principles
1. **Maintain compatibility** - Don't break existing APIs without good reason
2. **Update dependents** - Update all components/routes that use refactored code
3. **Test thoroughly** - Test all affected functionality
4. **Keep commits focused** - Make atomic, focused changes
5. **Improve, don't rewrite** - Refactor incrementally, not wholesale rewrites

### Safe Refactoring
- Extract repeated logic into utility functions
- Create custom hooks for reusable component logic
- Move business logic from controllers to services
- Improve naming for clarity
- Add error handling where missing

## When Explaining

### Communication Style
- **Be concise but thorough** - Don't over-explain, but don't skip important details
- **Provide examples** - Show code examples when helpful
- **Explain trade-offs** - When multiple approaches exist, explain pros/cons
- **Use proper terminology** - Use correct technical terms (component, hook, middleware, etc.)
- **Reference actual files** - Point to specific files in the codebase when relevant

### Code Examples
When providing code examples:
- Make them complete and runnable
- Follow project style guidelines
- Include necessary imports
- Add comments for complex logic only
- Show error handling

## What NOT to Do

### Strict Prohibitions
❌ Don't add unnecessary dependencies  
❌ Don't over-engineer simple solutions  
❌ Don't break existing functionality  
❌ Don't ignore error handling  
❌ Don't commit sensitive data or credentials  
❌ Don't use class components in React  
❌ Don't use TypeScript  
❌ Don't use CSS-in-JS libraries  
❌ Don't use inline styles  
❌ Don't use the `@apply` directive  
❌ Don't add semicolons  

### Anti-Patterns to Avoid
- Creating overly complex abstractions
- Premature optimization
- Ignoring mobile responsiveness
- Skipping validation
- Exposing sensitive data in error messages
- Not testing changes
- Breaking RESTful conventions
- Mutating state directly in React

## Project Context Awareness

### Tech Stack
Remember this is a **MERN stack** application:
- **MongoDB** - Database
- **Express** - Backend framework
- **React** - Frontend library (with Vite, not Create React App)
- **Node.js** - Runtime environment

### Key Tools & Libraries
- **Frontend**: React Router, Tailwind CSS, Axios, React Hot Toast, Quill
- **Backend**: Mongoose, JWT, Multer, ImageKit, Google Gemini API
- **Deployment**: Vercel (separate deployments for client and server)

### Development Priorities
1. Clean, readable code over premature optimization
2. User experience and intuitive UI
3. Simple but functional admin panel
4. Consistent code style throughout
5. Proper error handling everywhere

## Response Guidelines

### When User Asks for Help
- Understand the full context before suggesting solutions
- Ask clarifying questions if the request is ambiguous
- Provide complete solutions, not just suggestions
- Test your understanding by referencing actual code if needed

### When User Reports a Bug
- Ask for error messages, console logs, or network responses
- Guide them through debugging if needed
- Provide fixes with explanation
- Suggest preventive measures

### When User Requests a Feature
- Clarify requirements if needed
- Suggest the best approach given the existing architecture
- Implement the feature following project conventions
- Update both frontend and backend if needed
- Include proper error handling and validation

## Code Quality Standards

### Before Suggesting Code
Verify your code meets these criteria:
- ✅ Follows project style guide (2 spaces, no semicolons, single quotes)
- ✅ Includes error handling
- ✅ Uses appropriate HTTP status codes (backend)
- ✅ Implements proper validation
- ✅ Follows existing patterns in the codebase
- ✅ Is mobile-responsive (frontend)
- ✅ Uses Tailwind CSS (frontend)
- ✅ Has no unused variables or imports
- ✅ Uses early returns for error conditions
- ✅ Includes necessary comments for complex logic

### Code Review Mindset
When the user shares code, check for:
- Missing error handling
- Potential bugs or edge cases
- Style inconsistencies
- Security issues (exposed secrets, SQL injection, XSS)
- Performance issues
- Opportunities for improvement

## Documentation References

When relevant, reference these key documentation areas:
- **Architecture**: See [client-server-architecture.mdc](mdc:.cursor/rules/client-server-architecture.mdc)
- **API Endpoints**: Documented in architecture guide
- **Project Structure**: See root [README.md](mdc:README.md)
- **Environment Setup**: See [client/README.md](mdc:client/README.md) and [server/README.md](mdc:server/README.md)
