---
description: Client-server communication architecture, API flows, and data patterns in the Quick Blog application
---

# Quick Blog - Client-Server Architecture

## Overall Architecture

The application follows a typical MERN stack architecture with clear separation between client and server:

**Client (React + Vite)**: Handles UI/UX, routing, state management, and API communication
**Server (Express + Node.js)**: Manages business logic, authentication, database operations, and external services
**Database (MongoDB)**: Stores blogs, comments, and user data
**External Services**: ImageKit (CDN), Google Gemini API (AI features)

## Request/Response Flow

### Standard Request Flow
```
Client Component → Custom Hook → API Function (axios) 
  → HTTP Request + JWT → Server Route → Middleware 
  → Controller → Service (optional) → Model → Database
```

### Standard Response Flow
```
Database → Model → Controller → JSON Response 
  → Client API Layer → Update Hook State 
  → Context (if needed) → Component Re-render → UI Update
```

## Client Architecture

### Pages Structure
- **Public Pages**: Home, Blog (single), Blogs (list)
- **Admin Pages**: Login, Dashboard, AddBlog, BlogList, CommentList

### State Management
- React Context API (AppContext) for global state
- JWT tokens stored in localStorage
- Custom hooks for API calls and state management
- Location: [src/context/AppContext.jsx](mdc:client/src/context/AppContext.jsx)

### API Layer
All API calls centralized in [src/api/](mdc:client/src/api) directory:
- [adminApi.js](mdc:client/src/api/adminApi.js) - Admin operations
- [blogApi.js](mdc:client/src/api/blogApi.js) - Blog operations
- [commentApi.js](mdc:client/src/api/commentApi.js) - Comment operations
- [axiosConfig.js](mdc:client/src/api/axiosConfig.js) - Base axios configuration

All requests include JWT token in Authorization header when authenticated.

## Server Architecture

### API Routes Organization

#### Public Routes (No Authentication)
- `GET /api/blogs` - List all blogs
- `GET /api/blogs/:id` - Get single blog with comments
- `POST /api/blogs/:id/comments` - Add comment to blog
- `GET /api/newsletter/signup` - Newsletter signup

#### Protected Routes (Admin Only - JWT Required)
- `POST /api/admin/login` - Admin authentication
- `POST /api/admin/add-blog` - Create new blog
- `PUT /api/admin/update-blog/:id` - Update blog
- `DELETE /api/admin/delete-blog/:id` - Delete blog
- `GET /api/admin/blogs` - Get all blogs (admin view)
- `GET /api/admin/comments` - Get all comments
- `DELETE /api/admin/delete-comment/:id` - Delete comment
- `POST /api/admin/upload` - Upload image to ImageKit

### Middleware Stack
1. **Auth Middleware** ([middleware/auth.js](mdc:server/src/middleware/auth.js)) - Validates JWT tokens
2. **Multer Middleware** ([middleware/multer.js](mdc:server/src/middleware/multer.js)) - Handles file uploads
3. **Error Handler** ([middleware/errorHandler.js](mdc:server/src/middleware/errorHandler.js)) - Centralized error handling
4. **HTTP Logger** ([utils/httpLogger.js](mdc:server/src/utils/httpLogger.js)) - Request/response logging

### Controllers
Located in [src/controllers/](mdc:server/src/controllers):
- **adminController** - Admin operations (login, CRUD, uploads)
- **blogController** - Public blog operations (list, get, comments)
- **appController** - App-level operations (newsletter)

### Models (Mongoose Schemas)
Located in [src/models/](mdc:server/src/models):
- [Blog.js](mdc:server/src/models/Blog.js) - Blog posts
- [Comment.js](mdc:server/src/models/Comment.js) - User comments
- [User.js](mdc:server/src/models/User.js) - Admin users

## Key Communication Flows

### 1. Blog Listing (Public)
```
BlogList Component → useFetchBlogs Hook → blogApi.fetchBlogs() 
  → GET /api/blogs → blogController.getBlogs() 
  → Blog.find() → MongoDB → JSON Response → Update State → Render
```

### 2. Create Blog (Admin - Authenticated)
```
AddBlog Page → BlogForm Component → useCreateBlog Hook 
  → adminApi.createBlog() → POST /api/admin/add-blog
  → Auth Middleware (verify JWT) → adminController.addBlog() 
  → new Blog().save() → MongoDB → Success Response 
  → Toast Notification → Redirect
```

### 3. Image Upload (Admin)
```
BlogForm → File Input → Select Image 
  → adminApi.uploadImage() → POST /api/admin/upload
  → Auth Middleware → Multer Middleware (parse multipart/form-data)
  → adminController.uploadImage() → ImageKit.upload() 
  → ImageKit CDN → Return Image URL → Use in Blog Document
```

### 4. Add Comment (Public)
```
CommentForm → useCreateComment Hook → commentApi.createComment()
  → POST /api/blogs/:id/comments → blogController.addComment()
  → new Comment().save() → Blog.comments.push() 
  → MongoDB → Response → Refresh Comment List
```

### 5. Authentication Flow (Admin)
```
Login Page → AuthForm → Submit Credentials
  → adminApi.login() → POST /api/admin/login
  → adminController.login() → User.findOne() → Verify Password
  → Generate JWT (jwt.sign()) → Response with Token
  → Store in localStorage → Set AppContext.user 
  → Redirect to Dashboard

// Subsequent Protected Requests:
Request → Include JWT in Authorization header
  → Auth Middleware → jwt.verify() → Extract user
  → req.user = decoded → Continue to Controller
```

## Response Format Standards

### Success Response
```javascript
res.json({ 
  success: true, 
  data: result 
})
```

### Error Response
```javascript
res.json({ 
  success: false, 
  message: 'Error description' 
})
```

## External Service Integration

### ImageKit CDN
- Configuration: [configs/imageKit.js](mdc:server/src/configs/imageKit.js)
- Used for: Image uploads, storage, and optimization
- Flow: Multer (memory) → ImageKit upload → Return URL → Store in DB

### Google Gemini API
- Configuration: [configs/gemini.js](mdc:server/src/configs/gemini.js)
- Used for: AI-powered content features
- Integration: Server-side only (API key protected)

## Security & Authentication

### JWT Token Flow
1. **Login**: Server generates JWT with user data → Client stores in localStorage
2. **Protected Requests**: Client includes JWT in Authorization header (`Bearer <token>`)
3. **Verification**: Auth middleware validates token → Extracts user → Attaches to req.user
4. **Expiration**: Token expires after set time → User must re-login

### CORS Configuration
- Enabled for cross-origin requests
- Configured to accept requests from client domain
- Credentials allowed for cookie-based auth (if used)

## Error Handling Patterns

### Client-Side
```javascript
try {
  const response = await axios.get('/api/blogs')
  if (response.data.success) {
    setData(response.data.data)
  }
} catch (error) {
  toast.error(error.response?.data?.message || 'Something went wrong')
}
```

### Server-Side
```javascript
// In Controllers
try {
  const result = await Model.find()
  res.json({ success: true, data: result })
} catch (error) {
  console.error(error)
  res.status(500).json({ success: false, message: error.message })
}
```

## Database Operations

### Common Patterns
- Use `.lean()` for read-only queries (better performance)
- Use proper indexes on frequently queried fields
- Use `.populate()` for related documents (e.g., blog with comments)
- Handle connection errors gracefully

### Migrations
- Located in [migrations/](mdc:server/migrations)
- Use migrate-mongo for database migrations
- Create indexes and schema updates

## Deployment Architecture

### Client (Vercel)
- Deployed from `/client` directory
- Build command: `npm run build`
- Output: `/dist` directory
- Environment variables: `VITE_BACKEND_URL`

### Server (Vercel)
- Deployed from `/server` directory
- Serverless functions
- Environment variables: MongoDB URI, JWT secret, ImageKit keys, Gemini API key
- CORS configured for production client URL

## Performance Considerations

1. **Client**: 
   - React.memo() for expensive components
   - Lazy loading for routes
   - Image optimization via ImageKit

2. **Server**:
   - Database indexes on frequent queries
   - .lean() queries for better performance
   - Async/await with proper error handling

3. **Network**:
   - Axios interceptors for request/response handling
   - JWT tokens cached in localStorage
   - Optimistic UI updates where appropriate
